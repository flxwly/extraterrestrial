#include "MapData.hpp"


/**     -----------     **/
/**                     **/
/**     Collectible     **/
/**                     **/
/**     -----------     **/

Collectible::Collectible(const PVector &p, const unsigned int &c, bool worthDouble) :
        pos(p), state(0), visited(0), isWorthDouble(worthDouble) {
    if (c <= 3) {
        color = c;
    } else {
        COLLECTIBLE_ERROR("Can't initialize Collectible with color " + std::to_string(c) + "!")
        return;
    }
}

bool Collectible::isCorrectCollectible(PVector robotPos, double angle, double uncertainty,
                                       std::vector<int> possibleStates) const {
    return (geometry::dist(robotPos + (geometry::angle2Vector((angle - COLOR_SENSOR_ANGLE_OFFSET) * M_PI / 180) *
                                       COLOR_SENSOR_DIST_TO_CORE), pos) < uncertainty
            || geometry::dist(robotPos + (geometry::angle2Vector((angle + COLOR_SENSOR_ANGLE_OFFSET) * M_PI / 180) *
                                          COLOR_SENSOR_DIST_TO_CORE), pos) < uncertainty)
           && possibleStates.empty()
           || std::find(possibleStates.begin(), possibleStates.end(), state) != possibleStates.end();
}

bool Collectible::operator==(const Collectible &lhs) const {
    return pos == lhs.pos && color == lhs.color;
}


/**     -----------     **/
/**                     **/
/**       MapData       **/
/**                     **/
/**     -----------     **/


Field::Field(const int &width, const int &height,
             const double &scaleX, const double &scaleY, const std::string &map,
             const std::vector<PVector> &deposits,
             const std::vector<Collectible> &collectibles) : width_(width), height_(height) {

    FIELD_LOG("Creating new Field-object")

    // field::deposits: Deposit Areas of the field
    Deposits_ = deposits;
    scale_ = {scaleX, scaleY};
    Map_ = map;

    // field::Collectibles: Collectible Points of the field
    for (auto collectible : collectibles) {
        if (0 <= collectible.color && collectible.color <= 3) {
            collectible.pos.x /= scaleX;
            collectible.pos.y /= scaleY;
            Collectibles_[collectible.color].push_back(collectible);
        } else {
            FIELD_ERROR("Can't add Collectible at: " << collectible.pos << " with color: " << collectible.color
                                                     << "\n\t -> Collectible will be skipped.")
        }
    }
}

PVector Field::getSize() const {
    return {static_cast<double>(width_), static_cast<double>(height_)};
}


/** Getter for field::collectibles **/
std::vector<PVector> Field::getDeposits() {
    return Deposits_;
}

/** Getter for field::collectibles **/
std::vector<Collectible *> Field::getCollectibles(const std::vector<unsigned int> &colors) {
    std::vector<Collectible *> returnVector = {};
    // return after all indices have been checked.
    for (unsigned int index : colors) {
        if (index <= 3) {
            for (Collectible &collectible : Collectibles_[index]) {
                returnVector.push_back(&collectible);
            }
        } else {
            FIELD_ERROR("index out of range");
        }
    }

    FIELD_LOG("Returning " << returnVector.size() << " collectibles")
    return returnVector;
}


void Field::spawnTempWall(PVector pos, int r) {

    tempWallTiles_.push_back({std::chrono::steady_clock::now(), {}});

    const int centerX = static_cast<int>(round(pos.x * scale_.x));
    const int centerY = static_cast<int>(round(pos.y * scale_.y));
    const int radius = static_cast<int>(round(pos.x * geometry::dist({0, 0}, scale_)));
    int index;

    for (int x = -radius + centerX; x < radius + centerX; ++x) {
        for (int y = -radius + centerY; y < radius + centerY; ++y) {

            if ((x - centerX) * (x - centerX) + (y - centerY) * (y - centerY) > r * r ||
                x < 0 || x >= width_ || y < 0 || y >= height_) {
                continue;
            }

            index = idx(x, y);

            if (int(Map_[index]) == 48) {
                tempWallTiles_.back().second.push_back(index);
                Map_.replace(index, 1, "w");
            }
        }
    }

    FIELD_LOG("After spawning: " << Map_)
}


void Field::clearTempWall(long long int lifetime) {

    int removed = 0;
    while (!tempWallTiles_.empty()) {
        std::cout << (tempWallTiles_.back().first - std::chrono::steady_clock::now()).count() << std::endl;
        if ((std::chrono::steady_clock::now() - tempWallTiles_.back().first).count() >= lifetime) {
            for (auto index : tempWallTiles_.back().second) {
                Map_.replace(index, 1, "0");
            }

            tempWallTiles_.pop_back();
            removed++;
        } else {
            return;
        }
    }

    if (removed != 0) {
        FIELD_LOG("After clearing " << removed << " objects: " << Map_)
    }
}



Collectible *
Field::getCollectible(PVector robotPos, double angle, double uncertainty, int color, std::vector<int> possibleStates) {

    std::vector<Collectible *> collectibles;

    if (color == -1) {
        collectibles = getCollectibles({0, 1, 2, 3});
    } else if (color >= 0 && color <= 3) {
        collectibles = getCollectibles({static_cast<unsigned int> (color)});
    } else {
        FIELD_ERROR(color << " is an invalid color")
    }

    for (auto collectible : collectibles) {
        if (collectible->isCorrectCollectible(robotPos, angle, uncertainty, possibleStates)) {
            return collectible;
        }
    }

    FIELD_WARNING("no valid collectible found")
    return nullptr;
}

Collectible *Field::addCollectible(Collectible collectible) {
    Collectibles_[collectible.color].push_back(collectible);
    return &Collectibles_[collectible.color].back();
}

bool Field::removeCollectible(Collectible collectible) {
    auto it = std::find(Collectibles_[collectible.color].begin(), Collectibles_[collectible.color].end(), collectible);

    if (it != Collectibles_[collectible.color].end()) {
        Collectibles_[collectible.color].erase(it);
        FIELD_LOG("Successfully removed Collectible")
        return true;
    }
    FIELD_WARNING("Couldn't remove Collectible")
    return false;
}

std::vector<PVector> Field::AStarFindPath(PVector start, PVector end) {

    PATHFINDER_LOG("Setting up path finder... from " << round(start.x * scale_.x) << " | " << round(start.y * scale_.y)
                                                     << " to " << round(end.x * scale_.x) << " | "
                                                     << round(end.y * scale_.y))

    auto comp = [](const std::tuple<double, int> &n1, const std::tuple<double, int> &n2) {
        return std::get<0>(n1) > std::get<0>(n2);
    };

    const int startIdx = idx(static_cast<int>(round(start.x * scale_.x)), static_cast<int>(round(start.y * scale_.y)));
    const int endIdx = idx(static_cast<int>(round(end.x * scale_.x)), static_cast<int>(round(end.y * scale_.y)));

    if (startIdx == endIdx) {
        PATHFINDER_WARNING("Start is end")
        return {end};
    }

    const int size = width_ * height_;

    std::priority_queue<std::tuple<double, int>,
            std::vector<std::tuple<double, int>>, decltype(comp)> pq(comp);
    std::vector<int> p(size); // prev
    std::vector<double> d(size, INT_MAX); // dist (filled with max distance)

    PATHFINDER_LOG("Starting path finder...")

    d[startIdx] = 0;
    pq.push(std::make_tuple(0 + heuristic(startIdx, endIdx), startIdx));

    while (!pq.empty()) {

        int u = std::get<1>(pq.top());
        pq.pop(); // Get top element

        for (auto e : {-width_ - 1, -width_ + 1, +width_ - 1, +width_ + 1, +1, -1, +width_, -width_}) {
            int v = u + e; // neighbor node
            if (((e == 1 || e == -width_ + 1 || e == width_ + 1) && (v % width_ == 0)) // x-bounds
                || ((e == -1 || e == -width_ - 1 || e == width_ - 1) && (u % width_ == 0)))
                continue;

            if (0 <= v && v < size) { // Out of bounds check
                if (d[v] > d[u] + heuristic(u, v) && int(Map_[v]) == 48) {
                    p[v] = u;
                    d[v] = d[u] + heuristic(u, v);

                    if (v == endIdx) {
                        PATHFINDER_LOG("Path finder found a path")
                        std::vector<PVector> path{};
                        int curr = endIdx;
                        PVector cord;
                        while (curr != startIdx) {
                            cord = coord(curr);
                            path.emplace_back(cord.x / scale_.x, cord.y / scale_.y);
                            curr = p[curr];
                        }
                        path.push_back(start);

                        return path;
                    }

                    pq.push(std::make_tuple(d[v] + heuristic(v, endIdx), v));

                }
            }
        }
    }

    PATHFINDER_WARNING("Path finder couldn't find a path")
    return {};
}

int Field::idx(int x, int y) const {
    return x + y * width_;
}

double Field::heuristic(int idx1, int idx2) {
    return sqrt(pow(idx1 % width_ - idx2 % width_, 2) + pow(idx1 / width_ - idx2 / width_, 2));
}

PVector Field::coord(int idx) {
    return PVector(idx % width_, idx / width_);
}


/**     -----------     **/
/**                     **/
/**      geometry       **/
/**                     **/
/**     -----------     **/


// geometry::onSide():  Test if a point p2 is left/on/right a line through p0 and p1.
//      Input:  PVector p0, p1, p2
//      Return: >0 left; =0 on; <0 right
bool geometry::isLeft(PVector p0, PVector p1, PVector p2) {
    return (p1.x - p0.x) * (p2.y - p0.y) - (p2.x - p0.x) * (p1.y - p0.y) > 0;
}

double geometry::sqDist(double x1, double y1, double x2, double y2) {
    return pow(x1 - x2, 2) + pow(y1 - y2, 2);
}

double geometry::sqDist(const PVector &p1, const PVector &p2) {
    return pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2);
}

double geometry::dist(const PVector &p1, const PVector &p2) {
    return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}

double geometry::dist(double x1, double y1, double x2, double y2) {
    return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));
}

PVector geometry::angle2Vector(double a) {
    return {cos(a), sin(a)};
}

double geometry::vector2Angle(double x, double y) {

    double angle = atan2(y, x);

    return (angle >= 0) ? angle : 2 * M_PI + angle;
}

double geometry::vector2Angle(PVector v) {
    return geometry::vector2Angle(v.x, v.y);
}

double geometry::dot(PVector p1, PVector p2) {
    return p1.x * p2.x + p1.y * p2.y;
}


///   _______                _____          __
///  |   |   |.---.-..-----.|     \ .---.-.|  |_ .---.-.
///  |       ||  _  ||  _  ||  --  ||  _  ||   _||  _  |
///  |__|_|__||___._||   __||_____/ |___._||____||___._|
///                  |__|

#pragma region MapData

//------------- World1_Map --------------//

/*deposits*/
const std::vector<PVector> World1DEPOSITS = {{79, 11},
                                             {15, 59}};
/*map*/
const int World1MAP_WIDTH = 96;
const int World1MAP_HEIGHT = 72;
const std::string World


//------ Collectibles ------//
/*collectibles*/
const std::vector<Collectible> World1COLLECTIBLES = {{{62.84008552,        24.00000072},        2, false},
                                                     {{70.0880866,         19.727999999999998}, 2, false},
                                                     {{69.0320854,         28.84800112},        2, false},
                                                     {{56.21608544,        16.991999999999997}, 2, false},
                                                     {{50.0469084,         23.115207999999996}, 2, false},
                                                     {{55.266525040000005, 23.889400719999998}, 2, false},
                                                     {{42.126908,          17.547208},          2, false},
                                                     {{66.01279424,        33.732718884},       2, false},
                                                     {{73.4047942,         25.42871928},        2, false},
                                                     {{61.88479352,        28.4047184},         2, false},
                                                     {{60.63679384,        38.0047192},         2, false},
                                                     {{66.83155704,        41.69585264},        2, false},
                                                     {{74.223556,          49.85585308},        2, false},
                                                     {{60.735556,          34.2558524},         2, false},
                                                     {{61.647556,          47.02385284},        2, false},
                                                     {{42.473347079999996, 23.889400719999998}, 2, false},
                                                     {{47.513347336,       18.8494},            2, false},
                                                     {{39.71002088,        20.460829479999997}, 2, true},
                                                     {{41.55223836,        27.870967999999998}, 2, false},
                                                     {{13.816628000000001, 59.170508},          0, false},
                                                     {{19.576628,          52.8825066},         0, false},
                                                     {{19.000628,          66.370508},          0, false},
                                                     {{8.584627999999995,  51.8265066},         0, false},
                                                     {{8.392628000000002,  64.018508},          0, false},
                                                     {{19.547971999999998, 59.05990800000001},  0, false},
                                                     {{25.074625479999998, 67.35483740000001},  0, false},
                                                     {{30.601279039999998, 66.8018422},         0, false},
                                                     {{35.10447668,        65.032256},          0, false},
                                                     {{14.430702199999992, 64.70045999999999},  0, false},
                                                     {{8.187630639999995,  21.01382472},        1, false},
                                                     {{13.611939999999997, 47.33640528},        0, false},
                                                     {{15.044775999999999, 42.13824844},        0, false},
                                                     {{8.699357999999997,  46.56221128},        0, false},
                                                     {{4.298503999999994,  42.47004604},        0, false},
                                                     {{26.302771999999997, 55.07834},           0, false},
                                                     {{32.23880576,        57.73272},           0, false},
                                                     {{28.656716,          49.43778728},        0, false},
                                                     {{33.46694992,        52.202764},          0, false},
                                                     {{37.15138604,        56.516128},          0, false},
                                                     {{38.3795308,         50.10138248},        0, false},
                                                     {{33.569296,          46.672811280000005}, 0, false},
                                                     {{87.710024,          53.198156},          1, false},
                                                     {{69.79957388,        65.9170494},         1, false},
                                                     {{68.26439428,        61.16129016},        1, false},
                                                     {{64.5799582,         64.70045999999999},  1, false},
                                                     {{64.06823088,        67.797236},          1, false},
                                                     {{59.56810284,        66.10130644},        1, false},
                                                     {{63.14712216,        60.0553},            1, false},
                                                     {{88.7334756,         63.594468000000006}, 1, false},
                                                     {{89.2452032,         59.502304},          1, false},
                                                     {{90.78038520000001,  56.07373332},        1, false},
                                                     {{93.8507492,         50.43317892},        1, false},
                                                     {{88.93816760000001,  48.11059928},        1, false},
                                                     {{91.9061832,         66.691244},          1, false},
                                                     {{27.63326216,        9.400921839999999},  1, false},
                                                     {{28.656716,          14.48847868},        1, false},
                                                     {{32.64818716,        9.73272},            1, false},
                                                     {{24.665244,          13.161290639999997}, 1, false},
                                                     {{24.816716,          8.29647876},         1, false},
                                                     {{24.768715999999998, 19.384479279999997}, 1, false},
                                                     {{29.168442959999997, 18.47004628},        1, false},
                                                     {{33.3646052,         15.152073879999996}, 1, false},
                                                     {{6.140720000000002,  15.483871999999998}, 1, false},
                                                     {{5.014923199999998,  11.834102639999998}, 1, false},
                                                     {{29.37313364,        22.230415119999996}, 1, false},
                                                     {{84.94669724,        46.672811280000005}, 1, false},
                                                     {{82.899788,          52.31336332000001},  1, false},
                                                     {{92.0085316,         42.80184304},        1, false},
                                                     {{85.560768,          68.018432},          1, false},
                                                     {{3.1727056000000005, 49.769584880000004}, 0, false},
                                                     {{4.912579599999994,  57.622119999999995}, 0, false},
                                                     {{40.733474959999995, 67.4654374},         0, false},
                                                     {{69.083156,          15.926266680000001}, 2, false},
                                                     {{77.43515776,        11.414266599999998}, 2, false},
                                                     {{74.02715732,        21.49426676},        2, false},
                                                     {{61.9791572,         10.694266319999997}, 2, false},
                                                     {{63.86354,           18.691245079999998}, 2, false},
                                                     {{69.083156,          54.746542919999996}, 0, false},
                                                     {{11.872067999999999, 23.889400719999998}, 1, false},
                                                     {{32.13646,           28.976958760000002}, 1, false}};

//------------- World2_Map --------------//

/*deposits*/
const std::vector<PVector> World2DEPOSITS = {{69, 27},
                                             {71, 76}};
/*map*/
const int World2MAP_WIDTH = 144;
const int World2MAP_HEIGHT = 108;
const std::string World


//------ Collectibles ------//
/*collectibles*/
const std::vector<Collectible> World2COLLECTIBLES = {{{25.516659599999997, 78.399484},          0, false},
                                                     {{14.0446588,         79.407484},          0, false},
                                                     {{40.06823016,        95.05990880000002},  0, false},
                                                     {{45.204232000000005, 101.5879096},        0, true},
                                                     {{32.532227999999996, 88.963908},          0, false},
                                                     {{32.1482296,         99.8599092},         0, false},
                                                     {{53.73134328,        95.8894},            0, false},
                                                     {{67.24093836,        100.53456},          0, false},
                                                     {{61.71428632,        103.52074040000001}, 0, false},
                                                     {{82.89978696,        102.19355},          0, false},
                                                     {{52.81023456,        104.1843308},        0, false},
                                                     {{105.46694948000001, 96.5529956},         0, false},
                                                     {{109.210952,         91.41699456},        0, false},
                                                     {{112.7149504,        102.025},            0, false},
                                                     {{92.41790964,        100.7004632},        0, false},
                                                     {{95.02771808,        105.01382720000001}, 0, false},
                                                     {{131.7185468,        83.281106},          0, false},
                                                     {{136.3745472,        78.19310568},        0, false},
                                                     {{138.5825464,        89.1851058},         0, false},
                                                     {{126.438548,         75.169108},          0, false},
                                                     {{123.79854879999999, 89.281104},          0, false},
                                                     {{127.11300560000001, 101.8617524},        0, false},
                                                     {{132.8250044,        97.63775240000001},  0, false},
                                                     {{108.690832,         82.617512},          0, false},
                                                     {{118.208954,         84.2764988},         0, false},
                                                     {{26.7121524,         10.783409199999994}, 1, false},
                                                     {{24.775983999999994, 5.037783599999997},  1, false},
                                                     {{29.3219632,         18.248847999999995}, 1, false},
                                                     {{5.219618799999992,  8.460830799999997},  1, false},
                                                     {{6.140725200000006,  35.502303999999995}, 1, false},
                                                     {{31.624733999999997, 11.944698399999993}, 1, false},
                                                     {{52.61322092,        5.032695599999997},  1, false},
                                                     {{49.49322176,        15.640700000000002}, 1, false},
                                                     {{38.83722,           6.856697999999994},  1, false},
                                                     {{38.98122,           16.9846978},         1, false},
                                                     {{72.46055436,        9.1244212},          1, false},
                                                     {{76.63655472,        3.7004223999999937}, 1, false},
                                                     {{79.94855476,        13.92442119999999},  1, false},
                                                     {{66.26855384,        3.844422399999992},  1, false},
                                                     {{62.78891276,        15.262671999999995}, 1, false},
                                                     {{105.313432,         8.792628399999991},  1, false},
                                                     {{111.36143200000001, 16.47262956},        1, false},
                                                     {{99.265432,          15.032627999999995}, 1, false},
                                                     {{123.2750532,        10.617512799999993}, 1, false},
                                                     {{128.9552232,        9.456218799999995},  1, false},
                                                     {{88.88699364,        4.147466799999997},  1, false},
                                                     {{95.181236,          8.129033199999995},  1, false},
                                                     {{118.95505159999999, 15.033513559999996}, 1, false},
                                                     {{117.28784759999999, 9.622119999999995},  1, false},
                                                     {{105.927504,         15.926268},          1, false},
                                                     {{130.0298472,        23.8894},            1, false},
                                                     {{136.32409280000002, 6.96773919999999},   1, false},
                                                     {{111.479848,         16.48612},           1, false},
                                                     {{3.5309199999999947, 15.262671999999995}, 1, false},
                                                     {{15.658847999999999, 45.29032256},        2, false},
                                                     {{20.698849600000003, 39.29032232},        2, false},
                                                     {{23.962847600000003, 51.4343228},         2, false},
                                                     {{10.666849200000001, 37.9463222},         2, false},
                                                     {{11.290847600000006, 50.5223228},         2, false},
                                                     {{129.2622584,        59.39170504},        2, false},
                                                     {{131.7185468,        44.95852496},        2, false},
                                                     {{136.89425640000002, 65.24770524},        2, false},
                                                     {{125.2782604,        51.807704799999996}, 2, false},
                                                     {{123.742258,         63.471705560000004}, 2, false},
                                                     {{26.251599999999996, 61.05069124},        2, false},
                                                     {{31.6276,            55.050691008},       2, false},
                                                     {{31.195599999999992, 68.922692},          2, false},
                                                     {{19.00359999999999,  56.5866912},         2, false},
                                                     {{114.6780368,        54.414746552},       2, false},
                                                     {{122.353942,         35.99999928},        2, false},
                                                     {{126.57794200000001, 31.775998119999997}, 2, false},
                                                     {{136.0170576,        54.9124424},         2, false},
                                                     {{117.985942,         30.239998359999998}, 2, false},
                                                     {{115.44193920000001, 42.047999159999996}, 2, false},
                                                     {{116.9808072,        71.00460912},        2, false},
                                                     {{116.0597008,        64.86636},           2, false},
                                                     {{121.0608072,        79.21260976},        2, false},
                                                     {{109.06080676,       77.196608},          2, false},
                                                     {{110.37953200000001, 49.935484},          2, false},
                                                     {{108.38379336,       32.682028},          2, false},
                                                     {{108.38379336,       63.870968000000005}, 2, false},
                                                     {{106.059532,         44.0794834},         2, false},
                                                     {{104.907532,         54.3034841456},      2, false},
                                                     {{30.089551999999998, 35.17050648},        2, false},
                                                     {{32.69936,           41.640552},          2, false},
                                                     {{28.7078924,         26.046082},          2, false},
                                                     {{27.7867812,         45.45622136},        2, false},
                                                     {{113.6034128,        26.5437784},         1, false},
                                                     {{6.447760000000002,  83.44700399999999},  1, false},
                                                     {{23.027717600000003, 33.013824},          1, false}};


#pragma endregion
